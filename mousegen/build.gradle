plugins {
    id 'stanio-java'
    id 'application'
    id 'com.gradleup.shadow' version '8.3.6'
}

group = 'io.github.stanio'

application {
    mainClass = 'io.github.stanio.mousegen.Command'
    def argStr = mousegenJvmArgs.trim()
    applicationDefaultJvmArgs = argStr ? argStr.split(' ') as List
                                       : []
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    //toolchain {
    //    languageVersion = JavaLanguageVersion.of(17)
    //}
}

tasks.withType(JavaCompile) {
    options.release = 11
}

task colorWheel(type: JavaExec) {
    description = 'Generates/updates animated cursor frame static images'
    group = 'config'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.stanio.mousegen.source.ColorWheel'
}

task cursorHotspots(type: JavaExec) {
    description = 'Inserts/updates cursor hotspots from build(.toml).json into the SVG sources'
    group = 'config'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.stanio.mousegen.source.CursorHotspots'
}

jar {
    manifest {
        attributes('Main-Class': application.mainClass)
        attributes('Implementation-Version': project.version)
    }
}

tasks.named('shadowJar') {
    archiveClassifier = 'shaded'
    manifest {
        attributes('Class-Path': 'batik-all.jar xmlgraphics-commons.jar xml-apis-ext.jar pngtastic.jar')
    }

    from 'src/shadow'

    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude '**/module-info.class'

    minimize {
        exclude dependency('com.google.code.gson:gson')
        exclude dependency('com.github.weisj:jsvg')
    }
    dependencies {
        exclude dependency('com.fasterxml.woodstox:woodstox-core')
        exclude dependency('org.apache.xmlgraphics:.*')
        exclude dependency('xml-apis:xml-apis-ext')
        exclude dependency('commons-.*:commons-.*')
        exclude dependency('com.jhlabs:filters')
        exclude dependency('com.github.depsypher:pngtastic')
    }
}

tasks.named('assemble') {
    dependsOn 'executablePosixScript',
              'executableWindowsScript'
}

// https://skife.org/java/unix/2011/06/20/really_executable_jars.html
tasks.register('executablePosixScript', ConcatFiles) {
    group = 'Distribution'
    description = 'Compiles POSIX-shell "really executable jar" script.'

    sources = files('src/scripts/mousegen.sh', shadowJar)
    target = layout.buildDirectory.file('distributions/mousegen.sh')
}

tasks.register('executableWindowsScript', ConcatFiles) {
    group = 'Distribution'
    description = 'Compiles Windows command (batch) "really executable jar" script.'

    sources = files('src/scripts/mousegen.cmd', shadowJar)
    target = layout.buildDirectory.file('distributions/mousegen.cmd')
}

tasks.register('installExecutable', Copy) {
    group = 'Distribution'
    description = 'Installs the "really executable jar" on the local machine.'

    from tasks.named(executableArtifact)
    into "${-> project['installDir']}"
    doNotTrackState 'Target directory contains unrelated files'
    rename '.+(?:\\.sh|(\\.[^.]+))', 'mousegen$1'
    filePermissions {
        user.execute = true
    }
}

repositories {
    // Test with JSVG nightly snapshots
    //maven {
    //    url 'https://oss.sonatype.org/content/repositories/snapshots/'
    //}
}

configurations {
    mockitoAgent
}

dependencies {
    implementation rootProject
    //implementation 'io.github.stanio:stanio-misc'

    implementation libs.gson
    implementation libs.jsvg
    implementation libs.jhlabs.filters
    runtimeOnly    libs.woodstox

    testImplementation libs.mockito
    testImplementation "org.mockito:mockito-junit-jupiter:${libs.versions.mockito.get()}"
    testImplementation libs.bundles.xmlunit

    mockitoAgent(libs.mockito) { transitive = false }
}

tasks.named('test') {
    // Explicitly setting up instrumentation for inline mocking (Java 21+)
    // https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#mockito-instrumentation
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
}
